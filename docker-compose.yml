version: "3.9"

services:
  fastapi_app:
    build: .
    container_name: fastapi_app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    working_dir: /code/backend/src
    volumes:
      - ./backend/src:/code/backend/src
      - ./backend/tests:/code/backend/tests
      - faiss_data:/data
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started

  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A app.core.celery_app worker --loglevel=info
    working_dir: /code/backend/src
    volumes:
      - ./backend/src:/code/backend/src
    env_file: .env
    depends_on:
      redis:
        condition: service_started
      fastapi_app:
        condition: service_started

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  uploaded-consumer:
    build: .
    container_name: uploaded_consumer
    command: python -m app.main_uploaded_consumer
    working_dir: /code/backend/src
    volumes:
      - ./backend/src:/code/backend/src
      - faiss_data:/data
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092

  processed-consumer:
    build: .
    container_name: processed_consumer
    command: python -m app.main_processed_consumer
    working_dir: /code/backend/src
    volumes:
      - ./backend/src:/code/backend/src
      - faiss_data:/data
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092

  notifier-consumer:
    build: .
    container_name: notifier_consumer
    command: python -m app.main_notifier_consumer
    working_dir: /code/backend/src
    volumes:
      - ./backend/src:/code/backend/src
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_started
    environment:
      - KAFKA_BROKER=kafka:9092

volumes:
  mongo_data:
  kafka_data:
  faiss_data:
